<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">
	<!-- 30초마다 설정 파일의 변경을 확인한다. 파일이 변경되면 다시 로딩한다 -->

	<!-- [Start] set property info -->
	<property resource="logback.properties" />

	<!-- log packagename -->
	<property name="LOG_PACKAGE_NAME"
		value="${log.config.packagenam}" />
	<!-- log file path -->
	<property name="LOG_PATH" value="${log.config.path}" />
	<!-- log days -->
	<property name="LOG_DAYS" value="${log.config.days}" />
	<!-- log filesize log -->
	<property name="LOG_FILESIZE_LOG"
		value="${log.config.filesizelog}" />
	<!-- log filesize zip -->
	<property name="LOG_FILESIZE_ZIP"
		value="${log.config.filesizezip}" />
	<!-- log filesize total -->
	<property name="LOG_TOTAL_FILESIZE"
		value="${log.config.totalfilesize}" />
	<!-- log min count -->
	<property name="LOG_FILE_MIN" value="${log.config.min}" />
	<!-- log max count -->
	<property name="LOG_FILE_MAX" value="${log.config.max}" />
	<!-- logging pattern -->
	<property name="LOG_PATTERN"
		value="%-5level %d{yyyy-MM-dd HH:mm:ss} %logger[%method:%line] - %msg%n" />
	<!-- [End] set property info -->

	<!-- Console Appender -->
	<appender name="console"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder
			class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
	</appender>

	<!-- [Start] 압축파일 or 일반파일 -->
	<if condition='property("log.config.savemode").equals("ZIP")'>
		<!-- 압축 모드 -->
		<then>
			<!-- log file zip -->
			<appender name="FILE"
				class="ch.qos.logback.core.rolling.RollingFileAppender">
				<file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
				<rollingPolicy
					class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
					<fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}_%i.log.zip
					</fileNamePattern>
					<!-- file min count -->
					<minIndex>${LOG_FILE_MIN}</minIndex>
					<!-- file max count -->
					<maxIndex>${LOG_FILE_MAX}</maxIndex>
				</rollingPolicy>

				<!-- file size limit -->
				<triggeringPolicy
					class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
					<maxFileSize>${LOG_FILESIZE_ZIP}</maxFileSize>
				</triggeringPolicy>
				<encoder
					class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
					<pattern>${LOG_PATTERN}</pattern>
				</encoder>
			</appender>
		</then>
		<else>
			<!-- 로그 모드 -->
			<!-- log file save -->
			<!-- <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
				<file>${LOG_PATH}/LOG_%d{yyyy-MM-dd}_${LOG_FILE_NAME}.log</file> <rollingPolicy 
				class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> <fileNamePattern>${LOG_PATH}/LOG_%d{yyyy-MM-dd}_${LOG_FILE_NAME}.log</fileNamePattern> 
				file days limit <maxHistory>${LOG_DAYS}</maxHistory> total file size <totalSizeCap>${LOG_TOTAL_FILESIZE}</totalSizeCap> 
				</rollingPolicy> <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
				<pattern>${LOG_PATTERN}</pattern> </encoder> </appender> -->
			<appender name="SIFT" class="ch.qos.logback.classic.sift.SiftingAppender">
				<discriminator>
					<key>trxPath</key>
					<defaultValue>unknown</defaultValue>
				</discriminator>

				<sift>
					<appender name="FILE-${trxPath}" class="ch.qos.logback.core.rolling.RollingFileAppender">
						<file>${LOG_PATH}/LOG_${trxPath}.log</file>
						
						<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
							<fileNamePattern>${LOG_PATH}/LOG_%d{yyyy-MM-dd}_${trxPath}.log</fileNamePattern>
							<maxHistory>${LOG_DAYS}</maxHistory> 
							<totalSizeCap>${LOG_TOTAL_FILESIZE}</totalSizeCap> 
						</rollingPolicy>
						
						<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
							<pattern>${LOG_PATTERN}</pattern>
						</encoder>

					</appender>
				</sift>
			</appender>
		</else>
	</if>
	<!-- [End] 압축파일 or 일반파일 -->


	<!-- [Start] Appender 지정 Product / Develop / Local -->
	<if condition='property("log.config.mode").equals("P")'>
		<!-- Product Environment -->
		<then>
			<!-- real server -->
			<logger name="org.springframework" level="INFO" />
			<logger name="${LOG_PACKAGE_NAME}" level="INFO" />
			<root level="INFO">
				<appender-ref ref="console" />
				<appender-ref ref="FILE" />
			</root>
		</then>
		<else>
			<if condition='property("log.config.mode").equals("D")'>
				<!-- Devlop Environment -->
				<then>
					<!-- Develop server -->
					<logger name="${LOG_PACKAGE_NAME}" level="INFO" />
					<root level="INFO">
						<appeder-ref ref="console" />
						<appeder-ref ref="FILE" />
					</root>
				</then>
				<else>					<!-- Local Environment -->
					<!-- <logger name="${LOG_PACKAGE_NAME}" level="OFF"/> -->
					<logger name="com.mbus" level="INFO" />
					<logger name="org.springframework" level="INFO" additivity="false"/>
					
					<!-- root 태그는 기본적으로 모든 로그를 어떤 레벨로 어떻게 처리할 것인가에 대한 설정 -->
					<root level="INFO">
						<appender-ref ref="console" />
						<appender-ref ref="SIFT" />
					</root>
				</else>
			</if>
		</else>
	</if>
	<!-- [End] Appender 지정 Product / Develop / Local -->


	<!-- Log Level ALL : TRACE와 같음 나중에 확장을 위한것으로 보임. TRACE : TRACE, DEBUG, INFO, 
		WARN , ERROR DEBUG : DEBUG, INFO , WARN, ERROR INFO : INFO , WARN , ERROR 
		WARN : WARN , ERROR, ERROR : ERROR OFF : 출력하지 않음 -->

</configuration>